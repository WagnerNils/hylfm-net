from typing import List, Tuple, Optional, Sequence


def get_bdv_affine_transformations_by_name(name: str) -> List[List[float]]:
    if name == "Heart_tightCrop":  # "bead_ref0":
        return [
            [
                0.98048,
                0.004709,
                0.098297,
                -111.7542,
                7.6415e-05,
                0.97546,
                0.0030523,
                -20.1143,
                0.014629,
                8.2964e-06,
                -3.9928,
                846.8515,
            ]
        ]

    # elif name == "Heart_tightCrop":
    #     return [
    #         [
    #             0.97945,
    #             0.0048391,
    #             -0.096309,
    #             -88.5296,
    #             -0.0074754,
    #             0.98139,
    #             0.15814,
    #             -91.235,
    #             0.016076,
    #             0.0061465,
    #             4.0499,
    #             -102.0931,
    #         ]
    #     ]

    elif name == "staticHeartFOV":
        return [
            [
                1.000045172184472,
                -6.440948265626484e-4,
                -0.0037246544505502403,
                1.6647525184522693,
                -3.741111751453333e-4,
                0.9997241695263583,
                -7.727988497216694e-6,
                0.5482936082360137,
                6.417439009031318e-4,
                7.834754261221826e-5,
                1.0024816523664135,
                -2.0884853522301463,
            ],
            [
                1.0031348487012806,
                -2.4393612341215746e-4,
                -0.022354095904371995,
                5.848116160919745,
                -5.688306131898453e-4,
                1.0035215202352126,
                0.005454826549562322,
                -2.643832484309726,
                0.009525454800378438,
                -0.0040831532456764375,
                1.0083740999442286,
                -4.757593435405894,
            ],
            [
                0.97669,
                0.0076755,
                0.0042258,
                -95.112,
                -0.0061276,
                0.97912,
                0.03892,
                -134.1098,
                0.007308,
                0.0073582,
                1.1682,
                -92.7323,
            ],
            [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.4185, 0.0],
        ]
    elif name == "wholeFOV":
        return [
        [
            1.0000330417435905,
            0.0013576823539939468,
            -0.004114761682115554,
            0.5965954463114479,
            -2.608162465935266e-4,
            0.9997237146596126,
            -0.0012405487854156773,
            0.6049313296603196,
            -0.007468326192493499,
            -0.006393449585647912,
            1.0139671972757003,
            4.030886094615941,
        ],
        [
            1.0000195897268394,
            -0.001326713750716928,
            0.003542923090774597,
            -0.45057279277200163,
            1.959813002048347e-4,
            1.000282458610685,
            0.001418849770725325,
            -0.6307709082217439,
            0.007605383948124034,
            0.006427628247973187,
            0.9844683934402705,
            -3.5619099663579843,
        ],
        [
            1.0002542885875119,
            0.001640391796268422,
            -0.004916804343382724,
            0.7943935244074773,
            -0.0011763878931262618,
            0.9996893129866766,
            0.0020015643710407914,
            0.23570851330359974,
            -0.008752090572813771,
            -0.0064692182918879015,
            0.9973676871201351,
            8.374516246903323,
        ],
        [
            0.9987648848651456,
            -7.348386539296854e-4,
            -0.010270040762137386,
            15.90851688342657,
            5.988465343535266e-4,
            1.0031490069810332,
            1.7766079327323015e-4,
            -16.00168945475245,
            -0.0010431335860339346,
            0.01921986326427179,
            1.02866818001188,
            -24.853086195115633,
        ],
        [
            0.9998763934501763,
            -0.0010891310450819906,
            0.00253370847820035,
            -0.6115113860549377,
            7.675130470486004e-4,
            0.9983682901916651,
            -7.40670235632776e-4,
            0.8275234429996294,
            -0.00947710327402089,
            0.0038009121698615866,
            0.9993213751411238,
            3.1765203213020143,
        ],
        [
            1.0001499960607572,
            0.0014027361439267177,
            -0.0017760750843483504,
            -0.10921947468546678,
            -1.4673922853670316e-4,
            0.9992407191400258,
            -0.0017297884331933565,
            0.9394132446795214,
            0.024767938375552963,
            -0.00398032235341257,
            0.9783021841535382,
            -7.444609223601558,
        ],
        [
            1.0003559629383398,
            2.9327823350429983e-4,
            6.428006590138689e-4,
            -0.5171440459931798,
            -4.050787570647998e-4,
            0.9996835486510609,
            -2.6101507441633878e-5,
            0.3307699115452033,
            -0.007875800046626481,
            -0.002452377176303182,
            0.9930269401854842,
            7.089568501996945,
        ],
        [
            1.0008586374814403,
            0.0017016621421833808,
            0.0011200077040748062,
            -0.2440484013785469,
            4.817641577129386e-4,
            0.9983909483762317,
            0.002322117596739517,
            -1.191038991556635,
            -0.012612826427677736,
            0.0017988091415114254,
            1.0142720444336737,
            6.527121708955718,
        ],
        [
            0.97958,
            0.0047483,
            -0.01109,
            -151.2572,
            -0.0074967,
            0.98373,
            0.049058,
            -134.7033,
            0.013631,
            -0.0030357,
            1.1662,
            -75.4176,
        ],
        [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.4185, 0.0],
    ]
    else:
        raise NotImplementedError(name)


def get_ref_crop_out(
    affine_trf_name: str, ref_crop_in: Sequence[Sequence[Optional[int]]], inverted: bool
) -> Tuple[Tuple[int, Optional[int]], Tuple[int, Optional[int]], Tuple[int, Optional[int]]]:
    if inverted:
        raise NotImplementedError

    if affine_trf_name == "Heart_tightCrop" and ref_crop_in == ((0, None), (57, -57), (57, -57)):
        return ((19, -10), (152, -133), (171, -133))
    else:
        raise NotImplementedError((affine_trf_name, ref_crop_in))


if __name__ == "__main__":
    pass
